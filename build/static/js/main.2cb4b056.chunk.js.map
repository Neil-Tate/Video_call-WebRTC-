{"version":3,"sources":["component/socket.js","component/Emitter.js","component/MediaDevice.js","component/PeerConnection.js","component/MainWindow.js","component/CallWindow.js","component/CallModal.js","component/App.js","App.js","serviceWorker.js","index.js"],"names":["socket","io","connect","Emitter","this","events","event","args","forEach","fn","push","_","isFunction","listeners","index","findIndex","_fn","splice","MediaDevice","navigator","mediaDevices","getUserMedia","video","facingMode","height","min","ideal","max","audio","then","stream","emit","catch","err","DOMException","alert","console","log","type","on","len","arguments","length","track","state","enabled","set","getTracks","stop","PC_CONFIG","iceServers","urls","PeerConnection","friendID","pc","RTCPeerConnection","onicecandidate","to","candidate","ontrack","streams","mediaDevice","isCaller","config","addTrack","createOffer","start","isStarter","close","off","getDescription","bind","createAnswer","desc","setLocalDescription","sdp","rtcSdp","RTCSessionDescription","setRemoteDescription","iceCandidate","RTCIceCandidate","addIceCandidate","MainWindow","startCall","clientId","useState","setFriendID","callWithVideo","className","defaultValue","readOnly","spellCheck","placeholder","onChange","target","value","onClick","getButtonClass","icon","classnames","disable","CallWindow","peerSrc","localSrc","status","endCall","peerVideo","useRef","localVideo","setVideo","setAudio","useEffect","current","srcObject","toggle","toggleMediaDevice","deviceType","id","ref","autoPlay","muted","key","CallModal","callFrom","rejectCall","acceptWithVideo","MainApp","callWindow","callModal","startCallHandler","endCallHandler","rejectCallHandler","document","title","setState","from","data","src","newState","isEmpty","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.2cb4b056.chunk.js","sourcesContent":["import io from 'socket.io-client';\r\n\r\n// const socket = io.connect('http://192.168.100.124:5000');\r\nconst socket = io.connect('https://nameless-depths-63913.herokuapp.com/');\r\n\r\nexport default socket;\r\n","import _ from 'lodash';\r\n\r\nclass Emitter {\r\n  constructor() {\r\n    this.events = {};\r\n  }\r\n\r\n  emit(event, ...args) {\r\n    if (this.events[event]) {\r\n      this.events[event].forEach((fn) => fn(...args));\r\n    }\r\n    return this;\r\n  }\r\n\r\n  on(event, fn) {\r\n    if (this.events[event]) this.events[event].push(fn);\r\n    else this.events[event] = [fn];\r\n    return this;\r\n  }\r\n\r\n  off(event, fn) {\r\n    if (event && _.isFunction(fn)) {\r\n      const listeners = this.events[event];\r\n      const index = listeners.findIndex((_fn) => _fn === fn);\r\n      listeners.splice(index, 1);\r\n    } else this.events[event] = [];\r\n    return this;\r\n  }\r\n}\r\n\r\nexport default Emitter;\r\n","import _ from 'lodash';\r\nimport Emitter from './Emitter';\r\n\r\n/**\r\n * Manage all media devices\r\n */\r\nclass MediaDevice extends Emitter {\r\n  /**\r\n   * Start media devices and send stream\r\n   */\r\n  start() {\r\n    const constraints = {\r\n      video: {\r\n        facingMode: 'user',\r\n        height: { min: 360, ideal: 720, max: 1080 }\r\n      },\r\n      audio: true\r\n    };\r\n\r\n    navigator.mediaDevices\r\n      .getUserMedia(constraints)\r\n      .then((stream) => {\r\n        this.stream = stream;\r\n        this.emit('stream', stream);\r\n      })\r\n      .catch((err) => {\r\n        if (err instanceof DOMException) {\r\n          alert('Cannot open webcam and/or microphone');\r\n        } else {\r\n          console.log(err);\r\n        }\r\n      });\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Turn on/off a device\r\n   * @param {String} type - Type of the device\r\n   * @param {Boolean} [on] - State of the device\r\n   */\r\n  toggle(type, on) {\r\n    const len = arguments.length;\r\n    if (this.stream) {\r\n      this.stream[`get${type}Tracks`]().forEach((track) => {\r\n        const state = len === 2 ? on : !track.enabled;\r\n        _.set(track, 'enabled', state);\r\n      });\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Stop all media track of devices\r\n   */\r\n  stop() {\r\n    if (this.stream) {\r\n      this.stream.getTracks().forEach((track) => track.stop());\r\n    }\r\n    return this;\r\n  }\r\n}\r\n\r\nexport default MediaDevice;\r\n","import MediaDevice from './MediaDevice';\r\nimport Emitter from './Emitter';\r\nimport socket from './socket';\r\n\r\nconst PC_CONFIG = { iceServers: [{ urls: ['stun:stun.l.google.com:19302'] }] };\r\n\r\nclass PeerConnection extends Emitter {\r\n  /**\r\n     * Create a PeerConnection.\r\n     * @param {String} friendID - ID of the friend you want to call.\r\n     */\r\n  constructor(friendID) {\r\n    super();\r\n    this.pc = new RTCPeerConnection(PC_CONFIG);\r\n    this.pc.onicecandidate = (event) => socket.emit('call', {\r\n      to: this.friendID,\r\n      candidate: event.candidate\r\n    });\r\n    this.pc.ontrack = (event) => this.emit('peerStream', event.streams[0]);\r\n\r\n    this.mediaDevice = new MediaDevice();\r\n    this.friendID = friendID;\r\n  }\r\n\r\n  /**\r\n   * Starting the call\r\n   * @param {Boolean} isCaller\r\n   * @param {Object} config - configuration for the call {audio: boolean, video: boolean}\r\n   */\r\n  start(isCaller, config) {\r\n    this.mediaDevice\r\n      .on('stream', (stream) => {\r\n        stream.getTracks().forEach((track) => {\r\n          this.pc.addTrack(track, stream);\r\n        });\r\n        this.emit('localStream', stream);\r\n        if (isCaller) socket.emit('request', { to: this.friendID });\r\n        else this.createOffer();\r\n      })\r\n      .start(config);\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Stop the call\r\n   * @param {Boolean} isStarter\r\n   */\r\n  stop(isStarter) {\r\n    if (isStarter) {\r\n      socket.emit('end', { to: this.friendID });\r\n    }\r\n    this.mediaDevice.stop();\r\n    this.pc.close();\r\n    this.pc = null;\r\n    this.off();\r\n    return this;\r\n  }\r\n\r\n  createOffer() {\r\n    this.pc.createOffer()\r\n      .then(this.getDescription.bind(this))\r\n      .catch((err) => console.log(err));\r\n    return this;\r\n  }\r\n\r\n  createAnswer() {\r\n    this.pc.createAnswer()\r\n      .then(this.getDescription.bind(this))\r\n      .catch((err) => console.log(err));\r\n    return this;\r\n  }\r\n\r\n  getDescription(desc) {\r\n    this.pc.setLocalDescription(desc);\r\n    socket.emit('call', { to: this.friendID, sdp: desc });\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @param {Object} sdp - Session description\r\n   */\r\n  setRemoteDescription(sdp) {\r\n    const rtcSdp = new RTCSessionDescription(sdp);\r\n    this.pc.setRemoteDescription(rtcSdp);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @param {Object} candidate - ICE Candidate\r\n   */\r\n  addIceCandidate(candidate) {\r\n    if (candidate) {\r\n      const iceCandidate = new RTCIceCandidate(candidate);\r\n      this.pc.addIceCandidate(iceCandidate);\r\n    }\r\n    return this;\r\n  }\r\n}\r\n\r\nexport default PeerConnection;\r\n","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction MainWindow({ startCall, clientId }) {\r\n  const [friendID, setFriendID] = useState(null);\r\n\r\n  /**\r\n   * Start the call with or without video\r\n   * @param {Boolean} video\r\n   */\r\n  const callWithVideo = (video) => {\r\n    const config = { audio: true, video };\r\n    return () => friendID && startCall(true, friendID, config);\r\n  };\r\n\r\n  return (\r\n    <div className=\"container main-window\">\r\n      <div>\r\n        <h3>\r\n          Hi, your ID is\r\n          <input\r\n            type=\"text\"\r\n            className=\"txt-clientId\"\r\n            defaultValue={clientId}\r\n            readOnly\r\n          />\r\n        </h3>\r\n        <h4>Get started by calling a friend below</h4>\r\n      </div>\r\n      <div>\r\n        <input\r\n          type=\"text\"\r\n          className=\"txt-clientId\"\r\n          spellCheck={false}\r\n          placeholder=\"Your friend ID\"\r\n          onChange={(event) => setFriendID(event.target.value)}\r\n        />\r\n        <div>\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn-action fa fa-video-camera\"\r\n            onClick={callWithVideo(true)}\r\n          />\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn-action fa fa-phone\"\r\n            onClick={callWithVideo(false)}\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nMainWindow.propTypes = {\r\n  clientId: PropTypes.string.isRequired,\r\n  startCall: PropTypes.func.isRequired\r\n};\r\n\r\nexport default MainWindow;\r\n","import React, { useState, useEffect, useRef } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classnames from 'classnames';\r\n\r\nconst getButtonClass = (icon, enabled) => classnames(`btn-action fa ${icon}`, { disable: !enabled });\r\n\r\nfunction CallWindow({ peerSrc, localSrc, config, mediaDevice, status, endCall }) {\r\n  const peerVideo = useRef(null);\r\n  const localVideo = useRef(null);\r\n  const [video, setVideo] = useState(config.video);\r\n  const [audio, setAudio] = useState(config.audio);\r\n\r\n  useEffect(() => {\r\n    if (peerVideo.current && peerSrc) peerVideo.current.srcObject = peerSrc;\r\n    if (localVideo.current && localSrc) localVideo.current.srcObject = localSrc;\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (mediaDevice) {\r\n      mediaDevice.toggle('Video', video);\r\n      mediaDevice.toggle('Audio', audio);\r\n    }\r\n  });\r\n\r\n  /**\r\n   * Turn on/off a media device\r\n   * @param {String} deviceType - Type of the device eg: Video, Audio\r\n   */\r\n  const toggleMediaDevice = (deviceType) => {\r\n    if (deviceType === 'video') {\r\n      setVideo(!video);\r\n      mediaDevice.toggle('Video');\r\n    }\r\n    if (deviceType === 'audio') {\r\n      setAudio(!audio);\r\n      mediaDevice.toggle('Audio');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={classnames('call-window', status)}>\r\n      <video id=\"peerVideo\" ref={peerVideo} autoPlay />\r\n      <video id=\"localVideo\" ref={localVideo} autoPlay muted />\r\n      <div className=\"video-control\">\r\n        <button\r\n          key=\"btnVideo\"\r\n          type=\"button\"\r\n          className={getButtonClass('fa-video-camera', video)}\r\n          onClick={() => toggleMediaDevice('video')}\r\n        />\r\n        <button\r\n          key=\"btnAudio\"\r\n          type=\"button\"\r\n          className={getButtonClass('fa-microphone', audio)}\r\n          onClick={() => toggleMediaDevice('audio')}\r\n        />\r\n        <button\r\n          type=\"button\"\r\n          className=\"btn-action hangup fa fa-phone\"\r\n          onClick={() => endCall(true)}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nCallWindow.propTypes = {\r\n  status: PropTypes.string.isRequired,\r\n  localSrc: PropTypes.object, // eslint-disable-line\r\n  peerSrc: PropTypes.object, // eslint-disable-line\r\n  config: PropTypes.shape({\r\n    audio: PropTypes.bool.isRequired,\r\n    video: PropTypes.bool.isRequired\r\n  }).isRequired,\r\n  mediaDevice: PropTypes.object, // eslint-disable-line\r\n  endCall: PropTypes.func.isRequired\r\n};\r\n\r\nexport default CallWindow;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classnames from 'classnames';\r\n\r\n\r\nfunction CallModal({ status, callFrom, startCall, rejectCall }) {\r\n  const acceptWithVideo = (video) => {\r\n    const config = { audio: true, video };\r\n    return () => startCall(false, callFrom, config);\r\n  };\r\n\r\n  return (\r\n    <div className={classnames('call-modal', status)}>\r\n      <p>\r\n        <span className=\"caller\">{`${callFrom} is calling`}</span>\r\n      </p>\r\n      <button\r\n        type=\"button\"\r\n        className=\"btn-action fa fa-video-camera\"\r\n        onClick={acceptWithVideo(true)}\r\n      />\r\n      <button\r\n        type=\"button\"\r\n        className=\"btn-action fa fa-phone\"\r\n        onClick={acceptWithVideo(false)}\r\n      />\r\n      <button\r\n        type=\"button\"\r\n        className=\"btn-action hangup fa fa-phone\"\r\n        onClick={rejectCall}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nCallModal.propTypes = {\r\n  status: PropTypes.string.isRequired,\r\n  callFrom: PropTypes.string.isRequired,\r\n  startCall: PropTypes.func.isRequired,\r\n  rejectCall: PropTypes.func.isRequired\r\n};\r\n\r\nexport default CallModal;\r\n","import React, { Component } from 'react';\r\nimport _ from 'lodash';\r\nimport socket from './socket';\r\nimport PeerConnection from './PeerConnection';\r\nimport MainWindow from './MainWindow';\r\nimport CallWindow from './CallWindow';\r\nimport CallModal from './CallModal';\r\n\r\nclass MainApp extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      clientId: '',\r\n      callWindow: '',\r\n      callModal: '',\r\n      callFrom: '',\r\n      localSrc: null,\r\n      peerSrc: null\r\n    };\r\n    this.pc = {};\r\n    this.config = null;\r\n    this.startCallHandler = this.startCall.bind(this);\r\n    this.endCallHandler = this.endCall.bind(this);\r\n    this.rejectCallHandler = this.rejectCall.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    socket\r\n      .on('init', ({ id: clientId }) => {\r\n        document.title = `${clientId} - VideoCall`;\r\n        this.setState({ clientId });\r\n      })\r\n      .on('request', ({ from: callFrom }) => {\r\n        this.setState({ callModal: 'active', callFrom });\r\n      })\r\n      .on('call', (data) => {\r\n        if (data.sdp) {\r\n          this.pc.setRemoteDescription(data.sdp);\r\n          if (data.sdp.type === 'offer') this.pc.createAnswer();\r\n        } else this.pc.addIceCandidate(data.candidate);\r\n      })\r\n      .on('end', this.endCall.bind(this, false))\r\n      .emit('init');\r\n  }\r\n\r\n  startCall(isCaller, friendID, config) {\r\n    this.config = config;\r\n    this.pc = new PeerConnection(friendID)\r\n      .on('localStream', (src) => {\r\n        const newState = { callWindow: 'active', localSrc: src };\r\n        if (!isCaller) newState.callModal = '';\r\n        this.setState(newState);\r\n      })\r\n      .on('peerStream', (src) => this.setState({ peerSrc: src }))\r\n      .start(isCaller, config);\r\n  }\r\n\r\n  rejectCall() {\r\n    const { callFrom } = this.state;\r\n    socket.emit('end', { to: callFrom });\r\n    this.setState({ callModal: '' });\r\n  }\r\n\r\n  endCall(isStarter) {\r\n    if (_.isFunction(this.pc.stop)) {\r\n      this.pc.stop(isStarter);\r\n    }\r\n    this.pc = {};\r\n    this.config = null;\r\n    this.setState({\r\n      callWindow: '',\r\n      callModal: '',\r\n      localSrc: null,\r\n      peerSrc: null\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { clientId, callFrom, callModal, callWindow, localSrc, peerSrc } = this.state;\r\n    return (\r\n      <div>\r\n        <MainWindow\r\n          clientId={clientId}\r\n          startCall={this.startCallHandler}\r\n        />\r\n        {!_.isEmpty(this.config) && (\r\n          <CallWindow\r\n            status={callWindow}\r\n            localSrc={localSrc}\r\n            peerSrc={peerSrc}\r\n            config={this.config}\r\n            mediaDevice={this.pc.mediaDevice}\r\n            endCall={this.endCallHandler}\r\n          />\r\n        ) }\r\n        <CallModal\r\n          status={callModal}\r\n          startCall={this.startCallHandler}\r\n          rejectCall={this.rejectCallHandler}\r\n          callFrom={callFrom}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MainApp;\r\n","import React from 'react';\nimport MainApp from \"./component/App\";\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MainApp />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport './css/app.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}